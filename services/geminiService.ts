import { GoogleGenAI, Type } from "@google/genai";
import type { StoryInputs, ComicScene } from '../types.ts';

if (!process.env.API_KEY) {
  throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const storySchema = {
  type: Type.ARRAY,
  items: {
    type: Type.OBJECT,
    properties: {
      scene: {
        type: Type.STRING,
        description: "A one-sentence description of the visual scene, focusing on action and setting."
      },
      dialogue: {
        type: Type.STRING,
        description: "A short, impactful line of dialogue for the main character. Max 15 words."
      },
      imagePrompt: {
        type: Type.STRING,
        description: "A detailed, artistic prompt for an image generation model to create this scene. The prompt should specify 'vibrant digital comic book art style, cel shading, dynamic composition, cinematic lighting' and describe the character, action, and environment vividly."
      }
    },
    required: ["scene", "dialogue", "imagePrompt"]
  }
};

export const generateStoryAndImagePrompts = async (inputs: StoryInputs): Promise<ComicScene[]> => {
  const { character, setting, problem, solution, ending, panelCount } = inputs;

  const prompt = `
    You are a creative comic book writer. Your task is to transform user inputs into a ${panelCount}-panel comic story.
    For each panel, provide a concise scene description, a single line of dialogue for the main character, and a detailed image generation prompt.
    Ensure the story flows logically from panel to panel, reflecting the user's inputs.

    User Inputs:
    - Main Character: ${character}
    - Setting: ${setting}
    - Problem: ${problem}
    - Solution Attempt: ${solution}
    - Ending/Twist: ${ending}

    Generate exactly ${panelCount} panels that tell this story.
    - The first panel should introduce the character, setting, and the problem.
    - The middle panels (if any) should show the character attempting the solution and build suspense.
    - The final panel must depict the ending or twist.

    Return the output ONLY in the specified JSON format.
  `;

  const response = await ai.models.generateContent({
    model: "gemini-2.5-flash",
    contents: prompt,
    config: {
      responseMimeType: "application/json",
      responseSchema: storySchema,
    },
  });

  try {
    const jsonText = response.text.trim();
    const parsed = JSON.parse(jsonText) as ComicScene[];
    if (!Array.isArray(parsed) || parsed.length === 0) {
      throw new Error("API returned an invalid or empty story structure.");
    }
    if (parsed.length !== panelCount) {
      console.warn(`AI generated ${parsed.length} panels instead of the requested ${panelCount}. Using what was generated.`);
   }
    return parsed;
  } catch (e) {
    console.error("Failed to parse JSON response from Gemini:", response.text);
    throw new Error("Could not understand the story generated by the AI. Please try again.");
  }
};

export const generateImage = async (prompt: string): Promise<string> => {
  const response = await ai.models.generateImages({
    model: 'gemini-2.0-flash-preview-image-generation',
    prompt: prompt,
    config: {
      numberOfImages: 1,
      outputMimeType: 'image/jpeg',
      aspectRatio: '16:9',
    },
  });

  if (response.generatedImages && response.generatedImages.length > 0) {
    return response.generatedImages[0].image.imageBytes;
  } else {
    throw new Error("Image generation failed to return an image.");
  }
};